from datetime import datetime

from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi import APIRouter, Depends, Request, Form
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from models import Experiment, User
from database.db_depends import get_db
from typing import Annotated

from fastapi.templating import Jinja2Templates

templates = Jinja2Templates(directory="templates")

router = APIRouter(prefix='/experiments', tags=['Experiments'])

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
@router.get("/")
async def get_experiments(request: Request, db: Annotated[AsyncSession, Depends(get_db)]):
    experiments = await db.scalars(select(Experiment))
    return templates.TemplateResponse("experiments.html", {"request":request, "experiments":experiments.all()})


@router.get("/create", response_class=HTMLResponse)
async def show_form(request: Request, db: AsyncSession = Depends(get_db)):
    print("üî• show_form() –≤—ã–∑–≤–∞–Ω")
    result = await db.execute(select(User).where(User.is_slave == True))
    slaves = result.scalars().all()
    return templates.TemplateResponse("create_experiment.html", {
        "request": request,
        "slaves": slaves
    })


@router.post("/create")
async def create_experiment(
        request: Request,
        name: str = Form(...),
        task: str = Form(...),
        delivered: str = Form(...),
        manufacture: str = Form(...),
        creator_id: int = Form(...),
        conducted_id: int = Form(...),
        db: AsyncSession = Depends(get_db)
):
    try:
        delivered_dt = datetime.fromisoformat(delivered)
        manufacture_dt = datetime.fromisoformat(manufacture)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ id
        creator_result = await db.execute(select(User).where(User.id == creator_id))
        creator = creator_result.scalar_one_or_none()

        conducted_result = await db.execute(select(User).where(User.id == conducted_id))
        conducted = conducted_result.scalar_one_or_none()

        if not creator or not conducted:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")

        db_experiment = Experiment(
            delivered=delivered_dt,
            name=name,
            task=task,
            manufacture=manufacture_dt,
            creator=creator.name,
            conducted=conducted.name
        )

        db.add(db_experiment)
        await db.commit()

        return RedirectResponse("/experiments", status_code=303)


    except Exception as e:
        result = await db.execute(select(User).where(User.is_slave == True))
        slaves = result.scalars().all()
        return templates.TemplateResponse("create_experiment.html",
                                          {"request": request, "error": str(e), "slaves": slaves}, status_code=400)

@router.get("/{id}")
async def get_on_id(request: Request, id : int,db: Annotated[AsyncSession, Depends(get_db)]):
    experiment = await db.scalar(select(Experiment).where(Experiment.id == id))
    return templates.TemplateResponse("experiment_detail.html", {"request":request, "experiment":experiment})

@router.post("/{id}")
async def update_experiment(request: Request,
                             id: int,
                             comment: str = Form(...),
                             result: str = Form(...),
                             db: AsyncSession = Depends(get_db)):
    try:
        # 1. –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
        db_experiment = await db.scalar(select(Experiment).where(Experiment.id == id))
        if not db_experiment:
            return templates.TemplateResponse(
                "experiment_detail.html",
                {"request": request, "error": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."},
                status_code=404
            )

        # 2. –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è
        db_experiment.comment = comment
        db_experiment.result = result

        # 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await db.commit()
        await db.refresh(db_experiment)

        # 4. –†–µ–¥–∏—Ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ
        return RedirectResponse("/experiments", status_code=303)

    except Exception as e:
        await db.rollback()
        return templates.TemplateResponse(
            "experiment_detail.html",
            {"request": request, "error": str(e)},
            status_code=400
        )


